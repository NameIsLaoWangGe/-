{
  "code": "import { Admin, Effects, TimerAdmin, Tools, _SceneName } from \"./Lwg\";\r\nimport { _Res } from \"./_PreLoad\";\r\nexport var _Game;\r\n(function (_Game) {\r\n    class _Data {\r\n    }\r\n    _Data._property = {\r\n        name: 'name',\r\n        index: 'index',\r\n        color: 'color',\r\n    };\r\n    _Data._arr = [\r\n        {\r\n            index: 1,\r\n            name: 'yellow',\r\n            color: 'yellow',\r\n        },\r\n        {\r\n            index: 2,\r\n            name: 'yellow',\r\n            color: 'yellow',\r\n        },\r\n        {\r\n            index: 3,\r\n            name: 'blue',\r\n            color: 'blue',\r\n        }, {\r\n            index: 4,\r\n            name: 'blue',\r\n            color: 'blue',\r\n        }, {\r\n            index: 5,\r\n            name: 'red',\r\n            color: 'red',\r\n        }, {\r\n            index: 6,\r\n            name: 'red',\r\n            color: 'red',\r\n        }, {\r\n            index: 7,\r\n            name: 'blue',\r\n            color: 'blue',\r\n        }, {\r\n            index: 8,\r\n            name: 'blue',\r\n            color: 'blue',\r\n        },\r\n        {\r\n            index: 9,\r\n            name: 'blue',\r\n            color: 'blue',\r\n        },\r\n        {\r\n            index: 10,\r\n            name: 'blue',\r\n            color: 'blue',\r\n        },\r\n        {\r\n            index: 11,\r\n            name: 'red',\r\n            color: 'red',\r\n        },\r\n        {\r\n            index: 12,\r\n            name: 'yellow',\r\n            color: 'yellow',\r\n        },\r\n    ];\r\n    _Game._Data = _Data;\r\n    let _Label;\r\n    (function (_Label) {\r\n        _Label[\"trigger\"] = \"trigger\";\r\n        _Label[\"weapon\"] = \"weapon\";\r\n        _Label[\"enemy\"] = \"enemy\";\r\n    })(_Label = _Game._Label || (_Game._Label = {}));\r\n    _Game._fireControl = {\r\n        Aim: null,\r\n        EnemyParent: null,\r\n        rotateSwitch: true,\r\n        moveDownY: 0,\r\n    };\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"WeaponSate\"] = \"_Game_WeaponSate\";\r\n        _Event[\"EnemyMove\"] = \"_Game_EnemyMove\";\r\n        _Event[\"calculateBlood\"] = \"_Game_calculateBlood\";\r\n        _Event[\"skillEnemy\"] = \"_Game_skillEnemy\";\r\n        _Event[\"closeScene\"] = \"_Game_closeScene\";\r\n        _Event[\"aimAddColor\"] = \"_Game_aimAddColor\";\r\n        _Event[\"aimSubColor\"] = \"_Game_aimSubColor\";\r\n        _Event[\"launch\"] = \"_WeaponSateType_launch\";\r\n    })(_Event = _Game._Event || (_Game._Event = {}));\r\n    let _EnemySate;\r\n    (function (_EnemySate) {\r\n        _EnemySate[\"activity\"] = \"_EnemySate_activity\";\r\n        _EnemySate[\"death\"] = \"_EnemySate_death\";\r\n    })(_EnemySate = _Game._EnemySate || (_Game._EnemySate = {}));\r\n    function _init() {\r\n    }\r\n    _Game._init = _init;\r\n    class _Shell extends Admin._ObjectBase {\r\n        lwgOnStart() {\r\n            TimerAdmin._frameLoop(1, this, () => {\r\n            });\r\n        }\r\n    }\r\n    _Game._Shell = _Shell;\r\n    class _Stone extends _Shell {\r\n    }\r\n    _Game._Stone = _Stone;\r\n    class _EnemyBullet extends Admin._ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.speed = 2;\r\n        }\r\n        lwgOnStart() {\r\n            let GPoint = this._SceneImg('HeroContent').localToGlobal(new Laya.Point(this._SceneImg('Hero').x, this._SceneImg('Hero').y));\r\n            let p = new Laya.Point(this._Owner.x - GPoint.x, this._Owner.y - GPoint.y);\r\n            p.normalize();\r\n            TimerAdmin._frameLoop(1, this, () => {\r\n                this._Owner.x -= p.x * this.speed;\r\n                this._Owner.y -= p.y * this.speed;\r\n                Tools._Node.leaveStage(this._Owner, () => {\r\n                    this._Owner.removeSelf();\r\n                    return;\r\n                });\r\n            });\r\n            TimerAdmin._frameLoop(1, this, () => {\r\n                Tools._Node.checkTwoDistance(this._Owner, this._SceneImg('Hero'), 50, () => {\r\n                    this._Owner.removeSelf();\r\n                    this._evNotify(_Event.calculateBlood, [1]);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    _Game._EnemyBullet = _EnemyBullet;\r\n    class _Enemy extends Admin._ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.time = 0;\r\n            this.state = '';\r\n        }\r\n        lwgOnStart() {\r\n            this.state = _EnemySate.activity;\r\n            TimerAdmin._frameRandomLoop(100, 1000, this, () => {\r\n                if (this.state == _EnemySate.activity) {\r\n                    let bullet = Tools._Node.createPrefab(_Res._list.prefab2D.EnemyBullet.prefab);\r\n                    bullet.addComponent(_EnemyBullet);\r\n                    let GPoint = this._Parent.localToGlobal(new Laya.Point(this._Owner.x, this._Owner.y));\r\n                    this._Scene.addChild(bullet);\r\n                    bullet.pos(GPoint.x, GPoint.y);\r\n                }\r\n            });\r\n            let rotate = Tools._Number.randomOneHalf() == 1 ? -0.5 : 0.5;\r\n            TimerAdmin._frameLoop(1, this, () => {\r\n                let point = Tools._Point.getRoundPos(this._Owner.rotation += rotate, this._SceneImg('MobileFrame').width / 2 + this._Owner.height / 2, new Laya.Point(this._SceneImg('LandContent').width / 2, this._SceneImg('LandContent').height / 2));\r\n                this._Owner.x = point.x;\r\n                this._Owner.y = point.y;\r\n            });\r\n        }\r\n    }\r\n    _Game._Enemy = _Enemy;\r\n    class _Weapon extends Admin._ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.dynamics = 0;\r\n            this.launchAcc = 0;\r\n            this.dropAcc = 0;\r\n            this.stateType = {\r\n                launch: 'launch',\r\n                free: 'free',\r\n            };\r\n        }\r\n        get state() {\r\n            return this['Statevalue'] ? this['Statevalue'] : 'launch';\r\n        }\r\n        ;\r\n        set state(_state) {\r\n            this['Statevalue'] = _state;\r\n        }\r\n        ;\r\n        getSpeed() {\r\n            const acc = (1 - this.dynamics) * 5;\r\n            this.launchAcc -= acc;\r\n            return 80 + this.launchAcc;\r\n        }\r\n        getDropSpeed() {\r\n            return this.dropAcc += 0.5;\r\n        }\r\n        lwgOnAwake() {\r\n        }\r\n        lwgEvent() {\r\n            var move = () => {\r\n                if (!this.fGP) {\r\n                    this.fGP = new Laya.Point(this._Owner.x, this._Owner.y);\r\n                }\r\n                if (this.getSpeed() > 0) {\r\n                    let p = Tools._Point.angleAndLenByPoint(this._Owner.rotation - 90, this.getSpeed());\r\n                    this._Owner.x += p.x;\r\n                    this._Owner.y += p.y;\r\n                }\r\n                else {\r\n                    this._Owner.y += this.getDropSpeed();\r\n                }\r\n                !Tools._Node.leaveStage(this._Owner, () => {\r\n                    this._Owner.removeSelf();\r\n                }) && checkEnemy();\r\n            };\r\n            var drop = () => {\r\n                this.state = this.stateType.free;\r\n                Laya.timer.clearAll(this);\r\n                TimerAdmin._frameLoop(1, this, () => {\r\n                    this._Owner.y += 40;\r\n                    this._Owner.rotation += 10;\r\n                    Tools._Node.leaveStage(this._Owner, () => {\r\n                        this._Owner.removeSelf();\r\n                    });\r\n                });\r\n            };\r\n            var skill = (Enemy) => {\r\n                this._evNotify(_Event.skillEnemy, [1]);\r\n                for (let index = 0; index < 20; index++) {\r\n                    Effects._Particle._spray(Laya.stage, this._gPoint, [0, 0], [10, 35], null, null, null, null, null, null, [30, 100], null, [5, 20]);\r\n                }\r\n                Enemy.removeSelf();\r\n                this._Owner.removeSelf();\r\n            };\r\n            var checkEnemy = () => {\r\n                if (this.state === this.stateType.free) {\r\n                    return;\r\n                }\r\n                if (this._SceneImg('FrontScenery').getChildByName('Stone')) {\r\n                    for (let index = 0; index < this._SceneImg('FrontScenery').numChildren; index++) {\r\n                        const element = this._SceneImg('FrontScenery').getChildAt(index);\r\n                        if (element.name == 'Stone') {\r\n                            let gPStone = this._SceneImg('FrontScenery').localToGlobal(new Laya.Point(element.x, element.y));\r\n                            if (gPStone.distance(this._gPoint.x, this._gPoint.y) < 30) {\r\n                                drop();\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (let index = 0; index < _Game._fireControl.EnemyParent.numChildren; index++) {\r\n                    const Enemy = _Game._fireControl.EnemyParent.getChildAt(index);\r\n                    let gPEnemy = this._SceneImg('EnemyParent').localToGlobal(new Laya.Point(Enemy.x, Enemy.y));\r\n                    if (gPEnemy.distance(this._gPoint.x, this._gPoint.y) < 50) {\r\n                        if (this._Owner.name === Enemy.name.substr(5)) {\r\n                            let Shell = Enemy.getChildByName('Shell');\r\n                            if (Shell) {\r\n                                let angle = Tools._Point.angleByPoint(this._SceneImg('LandContent').x - this._gPoint.x, this._SceneImg('LandContent').y - this._gPoint.y) + 90;\r\n                                if (210 < angle && angle < 330) {\r\n                                    drop();\r\n                                }\r\n                                else {\r\n                                    skill(Enemy);\r\n                                }\r\n                            }\r\n                            else {\r\n                                skill(Enemy);\r\n                            }\r\n                        }\r\n                        else {\r\n                            drop();\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n                const pos = new Laya.Point(this._SceneImg('LandContent').x, this._SceneImg('LandContent').y);\r\n                if (pos.distance(this._gPoint.x, this._gPoint.y) < 150) {\r\n                    Laya.timer.clearAll(this);\r\n                    this.state = this.stateType.free;\r\n                    const lP = this._SceneImg('LandContent').globalToLocal(this._gPoint);\r\n                    this._SceneImg('LandContent').addChild(this._Owner);\r\n                    this._Owner.pos(lP.x, lP.y);\r\n                    this._Owner.rotation -= this._SceneImg('LandContent').rotation;\r\n                    const mask = new Laya.Sprite;\r\n                    mask.size(200, 300);\r\n                    mask.pos(0, 80);\r\n                    mask.loadImage('Lwg/UI/ui_l_orthogon_white.png');\r\n                    this._Owner.mask = mask;\r\n                }\r\n            };\r\n            this._evReg(_Event.launch, (dynamics) => {\r\n                if (this.state !== this.stateType.free) {\r\n                    TimerAdmin._frameLoop(1, this, () => {\r\n                        this.dynamics = dynamics;\r\n                        move();\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    _Game._Weapon = _Weapon;\r\n    class Game extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.Weapon = {\r\n                state: 'checkinAim',\r\n                stateType: {\r\n                    checkinAim: 'checkinAim',\r\n                    direction: 'direction',\r\n                },\r\n                ins: null,\r\n                Tail: null,\r\n                Pic: null,\r\n                dynamics: 0,\r\n                minPullDes: 0,\r\n                pullDes: 0,\r\n                maxPullDes: null,\r\n                heroFP: null,\r\n                lBowstringW: null,\r\n                rBowstringW: null,\r\n                diffY: -150,\r\n                create: (color, x, y) => {\r\n                    this.Weapon.ins = Tools._Node.createPrefab(_Res._list.prefab2D.Weapon.prefab);\r\n                    this._ImgVar('WeaponParent').addChild(this.Weapon.ins);\r\n                    this.Weapon.ins.name = color;\r\n                    this.Weapon.ins.addComponent(_Weapon);\r\n                    this.Weapon.ins.pos(x, y + this.Weapon.diffY);\r\n                    this.Weapon.Pic = this.Weapon.ins.getChildByName('Pic');\r\n                    this.Weapon.Pic.skin = `Game/UI/Game/Hero/Hero_01_weapon_${color}.png`;\r\n                    this.Weapon.lBowstringW = this._ImgVar('LBowstring').width;\r\n                    this.Weapon.rBowstringW = this._ImgVar('RBowstring').width;\r\n                    this.Weapon.heroFP = new Laya.Point(this._ImgVar('Hero').x, this._ImgVar('Hero').y);\r\n                    this.Weapon.minPullDes = this.Weapon.ins.height - 20;\r\n                    this.Weapon.maxPullDes = this.Weapon.minPullDes + 50;\r\n                    this.Weapon.pullDes = 0;\r\n                    this.Weapon.Tail = this.Weapon.ins.getChildByName('Tail');\r\n                    this._ImgVar('Quiver').visible = false;\r\n                },\r\n                remove: () => {\r\n                    if (this.Weapon.ins) {\r\n                        this.Weapon.ins.removeSelf();\r\n                        this.Weapon.ins = null;\r\n                        this.Weapon.state = this.Weapon.stateType.checkinAim;\r\n                    }\r\n                },\r\n                getAimGP: () => {\r\n                    return this._ImgVar('Aim').localToGlobal(new Laya.Point(this._ImgVar('Fulcrum').x, this._ImgVar('Fulcrum').y));\r\n                },\r\n                getTailGP: () => {\r\n                    return this.Weapon.ins.localToGlobal(new Laya.Point(this.Weapon.Tail.x, this.Weapon.Tail.y));\r\n                },\r\n                getWeaponGP: () => {\r\n                    return new Laya.Point(this.Weapon.ins.x, this.Weapon.ins.y);\r\n                },\r\n                checkinAim: (e) => {\r\n                    const dis = this.Weapon.getAimGP().distance(e.stageX, e.stageY);\r\n                    if (dis < 150 && e.stageY >= this.Weapon.getAimGP().y) {\r\n                        this.Weapon.state = this.Weapon.stateType.direction;\r\n                        this.Weapon.ins.pivotX = this.Weapon.ins.width / 2;\r\n                        this.Weapon.ins.pivotY = this.Weapon.ins.height / 2;\r\n                        this.Weapon.ins.pos(this.Weapon.getAimGP().x, this.Weapon.getAimGP().y);\r\n                        this._ImgVar('Bow').skin = `Game/UI/Game/Hero/Hero_01_bow_${this.Weapon.ins.name}.png`;\r\n                        this.Weapon.directionType = 'weapon';\r\n                        this.Weapon.direction(e);\r\n                    }\r\n                    else {\r\n                        this.Weapon.restore();\r\n                        this.Weapon.ins.rotation = 0;\r\n                        this.Weapon.ins.pos(e.stageX, e.stageY + this.Weapon.diffY);\r\n                        this._ImgVar('Bow').skin = `Game/UI/Game/Hero/Hero_01_bow_normalc.png`;\r\n                    }\r\n                },\r\n                getAimStageDis: (e) => {\r\n                    return this.Weapon.getAimGP().distance(e.stageX, e.stageY);\r\n                },\r\n                directionType: 'weapon',\r\n                direction: (e) => {\r\n                    if (e.stageY < this.Weapon.getAimGP().y) {\r\n                        this.Weapon.state = this.Weapon.stateType.checkinAim;\r\n                        this.Weapon.checkinAim(e);\r\n                    }\r\n                    else {\r\n                        let angle = 0;\r\n                        if (this.Weapon.directionType === 'weapon') {\r\n                            angle = Tools._Point.angleByPoint(this.Weapon.getAimGP().x - this.Weapon.ins.x, this.Weapon.getAimGP().y - this.Weapon.ins.y);\r\n                            if (Math.abs(this.Weapon.getAimGP().x - e.stageX) < 10) {\r\n                                this.Weapon.directionType = 'stage';\r\n                            }\r\n                        }\r\n                        else if (this.Weapon.directionType === 'stage') {\r\n                            angle = Tools._Point.angleByPoint(e.stageX - this.Weapon.ins.x, e.stageY - this.Weapon.ins.y);\r\n                        }\r\n                        this.Weapon.ins.rotation = this._ImgVar('Aim').rotation = angle;\r\n                        this.Weapon.ins.pos(this.Weapon.getAimGP().x, this.Weapon.getAimGP().y);\r\n                        this.Weapon.pullDes = this.Weapon.getWeaponGP().distance(e.stageX, e.stageY);\r\n                        if (this.Weapon.pullDes >= this.Weapon.minPullDes && this.Weapon.pullDes <= this.Weapon.maxPullDes) {\r\n                            this.Weapon.Tail.y = this.Weapon.pullDes;\r\n                            this.Weapon.Pic.y = this.Weapon.pullDes - this.Weapon.minPullDes;\r\n                            const ratio = this.Weapon.Pic.y / (this.Weapon.maxPullDes - this.Weapon.minPullDes);\r\n                            this._ImgVar('DynamicsBar').mask.y = this._ImgVar('DynamicsBar').height * (1 - ratio);\r\n                            this.Weapon.dynamics = ratio;\r\n                            this._ImgVar('Hero').y = this.Weapon.heroFP.y + this.Weapon.Pic.y;\r\n                        }\r\n                        this.Weapon.bowstring();\r\n                        return angle;\r\n                    }\r\n                },\r\n                bowstring: () => {\r\n                    const angle = Tools._Point.angleByPoint(this.Weapon.getTailGP().x - this.Weapon.ins.x, this.Weapon.getTailGP().y - this.Weapon.ins.y);\r\n                    const lBowstringGP = this._ImgVar('Aim').localToGlobal(new Laya.Point(this._ImgVar('LBowstring').x, this._ImgVar('LBowstring').y));\r\n                    const lBowstringAngle = Tools._Point.angleByPoint(lBowstringGP.x - this.Weapon.getTailGP().x, lBowstringGP.y - this.Weapon.getTailGP().y);\r\n                    this._ImgVar('LBowstring').rotation = lBowstringAngle - 90 - angle;\r\n                    this._ImgVar('LBowstring').width = this.Weapon.getTailGP().distance(lBowstringGP.x, lBowstringGP.y);\r\n                    const rBowstringGP = this._ImgVar('Aim').localToGlobal(new Laya.Point(this._ImgVar('RBowstring').x, this._ImgVar('RBowstring').y));\r\n                    const rBowstringAngle = Tools._Point.angleByPoint(rBowstringGP.x - this.Weapon.getTailGP().x, rBowstringGP.y - this.Weapon.getTailGP().y);\r\n                    this._ImgVar('RBowstring').rotation = rBowstringAngle + 90 - angle;\r\n                    this._ImgVar('RBowstring').width = this.Weapon.getTailGP().distance(rBowstringGP.x, rBowstringGP.y);\r\n                },\r\n                restore: () => {\r\n                    this._ImgVar('LBowstring').width = this.Weapon.lBowstringW;\r\n                    this._ImgVar('RBowstring').width = this.Weapon.rBowstringW;\r\n                    this._ImgVar('RBowstring').rotation = this._ImgVar('LBowstring').rotation = 0;\r\n                    this._ImgVar('Aim').rotation = 0;\r\n                    this._ImgVar('Hero').y = this.Weapon.heroFP.y;\r\n                },\r\n                checkLuanch: () => {\r\n                    if (this.Weapon.ins) {\r\n                        if (this.Weapon.state === this.Weapon.stateType.direction) {\r\n                            this._evNotify(_Event.launch, [this.Weapon.dynamics]);\r\n                            Tools._Node.changePivot(this.Weapon.ins, this.Weapon.ins.pivotX + this.Weapon.Pic.x, this.Weapon.ins.pivotY);\r\n                        }\r\n                        else {\r\n                            this.Weapon.ins.removeSelf();\r\n                        }\r\n                        this._ImgVar('Quiver').visible = true;\r\n                        this.Weapon.restore();\r\n                        this.Weapon.ins = null;\r\n                        this.Weapon.state = this.Weapon.stateType.checkinAim;\r\n                    }\r\n                },\r\n                move: (e) => {\r\n                    this.Weapon[this.Weapon.state](e);\r\n                }\r\n            };\r\n            this.heroContentFP = null;\r\n        }\r\n        lwgOnAwake() {\r\n        }\r\n        lwgOnStart() {\r\n            TimerAdmin._frameLoop(1, this, () => {\r\n                this._ImgVar('LandContent').rotation += 0.1;\r\n            });\r\n            _Game._fireControl.EnemyParent = this._ImgVar('EnemyParent');\r\n            _Game._fireControl.Aim = this._ImgVar('Aim');\r\n            for (let index = 0; index < this._ImgVar('EnemyParent').numChildren; index++) {\r\n                const element = this._ImgVar('EnemyParent').getChildAt(index);\r\n                Tools._Node.changePivot(element, element.width / 2, element.height / 2);\r\n                element.addComponent(_Enemy);\r\n            }\r\n        }\r\n        lwgEvent() {\r\n            this._evReg(_Event.aimAddColor, (Weapon) => {\r\n                if (this._ImgVar('Bow')['launch'] !== Weapon) {\r\n                    this._ImgVar('Bow')['launch'] = Weapon;\r\n                    this._ImgVar('Bow').skin = `Game/UI/Game/Hero/Hero_01_bow_${Weapon['_data'][_Data._property.color]}.png`;\r\n                }\r\n            });\r\n            this._evReg(_Event.aimSubColor, (Weapon) => {\r\n                if (this._ImgVar('Bow')['launch'] == Weapon) {\r\n                    this._ImgVar('Bow').skin = `Game/UI/Game/Hero/Hero_01_bow_normalc.png`;\r\n                    this._ImgVar('Bow')['launch'] = null;\r\n                }\r\n            });\r\n            let bloodNum = 20;\r\n            let _width = 100;\r\n            this._evReg(_Event.calculateBlood, (number) => {\r\n                let Blood = this._ImgVar('Blood').getChildAt(0);\r\n                Blood.width = Blood.width - _width / 20;\r\n                bloodNum -= number;\r\n                if (!this['bloodNumSwitch']) {\r\n                    if (bloodNum <= 0) {\r\n                        this['bloodNumSwitch'] = true;\r\n                        this._openScene(_SceneName.Defeated, false);\r\n                    }\r\n                }\r\n            });\r\n            let enemyNum = this._ImgVar('EnemyParent').numChildren;\r\n            this._evReg(_Event.skillEnemy, () => {\r\n                enemyNum -= 1;\r\n                if (!this['EnemyNumSwitch']) {\r\n                    if (enemyNum <= 0) {\r\n                        this['EnemyNumSwitch'] = true;\r\n                        this._openScene(_SceneName.Victory, false);\r\n                    }\r\n                }\r\n            });\r\n            this._evReg(_Event.closeScene, () => {\r\n                this._closeScene();\r\n            });\r\n        }\r\n        lwgButton() {\r\n            let QuiverArr = [this._ImgVar('Quiver_blue'), this._ImgVar('Quiver_yellow'), this._ImgVar('Quiver_red')];\r\n            for (let index = 0; index < QuiverArr.length; index++) {\r\n                const element = QuiverArr[index];\r\n                this._btnFour(element, (e) => {\r\n                    e.stopPropagation();\r\n                    this.Weapon.create(element.name.substr(7), e.stageX, e.stageY);\r\n                }, null, () => {\r\n                    this.Weapon.remove();\r\n                }, () => {\r\n                }, 'null');\r\n            }\r\n        }\r\n        lwgOnStageDown(e) {\r\n            this.heroContentFP = new Laya.Point(e.stageX, e.stageY);\r\n        }\r\n        lwgOnStageMove(e) {\r\n            if (this.Weapon.ins) {\r\n                this.Weapon.move(e);\r\n            }\r\n            else {\r\n                if (this.heroContentFP) {\r\n                    let diffX = e.stageX - this.heroContentFP.x;\r\n                    let diffY = e.stageY - this.heroContentFP.y;\r\n                    this._ImgVar('HeroContent').x += diffX;\r\n                    this._ImgVar('HeroContent').y += diffY;\r\n                    this.heroContentFP = new Laya.Point(e.stageX, e.stageY);\r\n                    if (this._ImgVar('HeroContent').x > Laya.stage.width) {\r\n                        this._ImgVar('HeroContent').x = Laya.stage.width;\r\n                    }\r\n                    if (this._ImgVar('HeroContent').x < 0) {\r\n                        this._ImgVar('HeroContent').x = 0;\r\n                    }\r\n                    if (this._ImgVar('HeroContent').y < 0) {\r\n                        this._ImgVar('HeroContent').y = 0;\r\n                    }\r\n                    if (this._ImgVar('HeroContent').y > Laya.stage.height - 200) {\r\n                        this._ImgVar('HeroContent').y = Laya.stage.height - 200;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        lwgOnStageUp() {\r\n            this.Weapon.checkLuanch();\r\n            this.heroContentFP = null;\r\n        }\r\n    }\r\n    _Game.Game = Game;\r\n})(_Game || (_Game = {}));\r\nexport default _Game.Game;\r\n",
  "references": [
    "F:/Work/Game/07_RescueFlowerGirl_2.5.0/Project/RescueFlowerGirl_2.5.0/src/script/Frame/Lwg.ts",
    "F:/Work/Game/07_RescueFlowerGirl_2.5.0/Project/RescueFlowerGirl_2.5.0/src/script/Frame/_PreLoad.ts",
    "F:/Work/Game/07_RescueFlowerGirl_2.5.0/Project/RescueFlowerGirl_2.5.0/src/script/Frame/_PropTry.ts"
  ]
}
