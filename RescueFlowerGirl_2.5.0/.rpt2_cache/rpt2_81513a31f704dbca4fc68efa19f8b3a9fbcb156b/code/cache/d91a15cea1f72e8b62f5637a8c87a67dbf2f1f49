{
  "code": "import Lwg, { LwgTimer, LwgTools } from \"../../Lwg/Lwg\";\r\nimport { _EnemyBullet } from \"./_EnemyBullet\";\r\nexport class _General {\r\n    static moveByAngle(Bullet, diffX, angle, speed, rSpeed, FrameFunc, ChildMove) {\r\n        let time = 0;\r\n        let _childMoveDelay;\r\n        if (ChildMove) {\r\n            _childMoveDelay = ChildMove.delay ? LwgTools._Number.randomOneInt(ChildMove.delay[0], ChildMove.delay[1]) : null;\r\n        }\r\n        const _rSpeed = LwgTools._Number.randomOneHalf() === 0 ? rSpeed : -rSpeed;\r\n        Bullet.rotation = angle - 90;\r\n        let _baseRadius = 0;\r\n        const pos = new Laya.Point(Bullet.x += diffX, Bullet.y);\r\n        LwgTimer._frameLoop(1, Bullet, () => {\r\n            const point = LwgTools._Point.getRoundPosNew(angle, _baseRadius += speed, pos);\r\n            Bullet.pos(point.x, point.y);\r\n            Bullet.rotation += _rSpeed;\r\n            if (FrameFunc && FrameFunc.func && FrameFunc.interval) {\r\n                if (time % FrameFunc.interval === 0) {\r\n                    FrameFunc.func();\r\n                }\r\n            }\r\n            if (ChildMove && ChildMove.type) {\r\n                if (_childMoveDelay && time > _childMoveDelay) {\r\n                    this[ChildMove.type](Bullet);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static moveByXY(Bullet, diffX, speedX, speedY, rSpeed, FrameFunc, ChildMove) {\r\n        let time = 0;\r\n        let _childMoveDelay;\r\n        if (ChildMove) {\r\n            _childMoveDelay = ChildMove.delay ? LwgTools._Number.randomOneInt(ChildMove.delay[0], ChildMove.delay[1]) : null;\r\n        }\r\n        Bullet.x += diffX;\r\n        const _rSpeed = LwgTools._Number.randomOneHalf() === 0 ? rSpeed : -rSpeed;\r\n        LwgTimer._frameLoop(1, Bullet, () => {\r\n            time++;\r\n            Bullet.x += speedX;\r\n            Bullet.y += speedY;\r\n            Bullet.rotation += _rSpeed;\r\n            if (FrameFunc && FrameFunc.func && FrameFunc.interval) {\r\n                if (time % FrameFunc.interval === 0) {\r\n                    FrameFunc.func();\r\n                }\r\n            }\r\n            if (ChildMove && ChildMove.type) {\r\n                if (_childMoveDelay && time > _childMoveDelay) {\r\n                    this[ChildMove.type](Bullet);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    static childExplodebyAngle(ParentBullet, speed = 10, rSpeed = 5) {\r\n        Laya.timer.clearAll(ParentBullet);\r\n        _EnemyBullet.checkNumChild(ParentBullet);\r\n        const gPosBullet = new Laya.Point(ParentBullet._lwg.gPoint.x, ParentBullet._lwg.gPoint.y);\r\n        for (let index = 0; index < ParentBullet.numChildren; index++) {\r\n            const ChildB = ParentBullet.getChildAt(index);\r\n            Lwg.NodeAdmin._addProperty(ChildB);\r\n            const gPosChildB = new Laya.Point(ChildB._lwg.gPoint.x, ChildB._lwg.gPoint.y);\r\n            const angle = LwgTools._Point.pointByAngleNew(gPosChildB.x - gPosBullet.x, gPosChildB.y - gPosBullet.y);\r\n            this.moveByAngle(ChildB, 0, angle, speed, rSpeed, null, null);\r\n        }\r\n    }\r\n    static _fall(Enemy, interval1, interval2, speedY = 10, rSpeed = 0, style = _EnemyBullet.Type.three_Across, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            LwgTimer._frameRandomLoop(interval1, interval2, Enemy, () => {\r\n                this.moveByXY(_EnemyBullet[style](Enemy), diffX, 0, speedY, rSpeed, frameFunc, ChildMove);\r\n            });\r\n        });\r\n    }\r\n    static _annular(Enemy, interval, num = 10, speed = 10, rSpeed = 0, style, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            LwgTimer._frameLoop(interval, Enemy, () => {\r\n                for (let index = 0; index < num; index++) {\r\n                    this.moveByAngle(_EnemyBullet[style](Enemy), diffX, 360 / num * index, speed, rSpeed, frameFunc, ChildMove);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    static _spiral(Enemy, interval, num, spacingAngle, speed = 10, rSpeed = 0, style = _EnemyBullet.Type.single, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        let time = 0;\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            LwgTimer._frameLoop(interval, Enemy, () => {\r\n                time++;\r\n                const fA = 0;\r\n                const ep = new Laya.Point(Enemy._lwg.gPoint.x + diffX, Enemy._lwg.gPoint.y);\r\n                for (let index = 0; index < num; index++) {\r\n                    let angle = fA + time * spacingAngle;\r\n                    angle += index * 360 / num;\r\n                    this.moveByAngle(_EnemyBullet[style](Enemy), diffX, angle, speed, rSpeed, frameFunc, ChildMove);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    static _slapDown(Enemy, interval = 3, startAngle = 0, endAngle = 180, spacingAngle = 15, speed = 10, rSpeed = 0, style = _EnemyBullet.Type.single, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            let time = 0;\r\n            LwgTimer._frameLoop(interval, Enemy, () => {\r\n                let angle = time * spacingAngle;\r\n                if (angle > endAngle) {\r\n                    Enemy['angleState'] = 'sub';\r\n                }\r\n                if (angle <= startAngle) {\r\n                    Enemy['angleState'] = 'add';\r\n                }\r\n                if (Enemy['angleState'] === 'sub') {\r\n                    time--;\r\n                }\r\n                else {\r\n                    time++;\r\n                }\r\n                this.moveByAngle(_EnemyBullet[style](Enemy), diffX, angle, speed, rSpeed, frameFunc, ChildMove);\r\n            });\r\n        });\r\n    }\r\n    static _randomAngleDown(Enemy, interval1, interval2, speed = 10, rSpeed = 0, style = _EnemyBullet.Type.single, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            LwgTimer._frameRandomLoop(interval1, interval2, Enemy, () => {\r\n                this.moveByAngle(_EnemyBullet[style](Enemy), diffX, LwgTools._Number.randomOneInt(0, 180), speed, rSpeed, frameFunc, ChildMove);\r\n            });\r\n        });\r\n    }\r\n    static _evenDowByCenter(Enemy, interval = 5, num = 2, spacing = 30, speed = 10, rSpeed = 0, style = _EnemyBullet.Type.three_Triangle, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            rSpeed = LwgTools._Number.randomOneHalf() === 0 ? rSpeed : -rSpeed;\r\n            LwgTimer._frameLoop(interval, Enemy, () => {\r\n                for (let index = 0; index < num; index++) {\r\n                    let angle = index * (180 - spacing * 2) / (num - 1) + spacing;\r\n                    this.moveByAngle(_EnemyBullet[style](Enemy), diffX, angle, speed, rSpeed, frameFunc, ChildMove);\r\n                }\r\n            });\r\n        });\r\n    }\r\n    static _assignAngle(Enemy, interval = 20, angle = 30, num = 2, numFrameInterval = 10, speed = 10, rSpeed = 0, style = _EnemyBullet.Type.single, delay = 0, diffX = 0, frameFunc, ChildMove) {\r\n        LwgTimer._frameOnce(delay, Enemy, () => {\r\n            LwgTimer._frameLoop(interval, Enemy, () => {\r\n                for (let index = 0; index < num; index++) {\r\n                    LwgTimer._frameOnce(numFrameInterval * index, Enemy, () => {\r\n                        this.moveByAngle(_EnemyBullet[style](Enemy), diffX, angle, speed, rSpeed, frameFunc, ChildMove);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n_General._ChildMoveType = {\r\n    childExplodebyAngle: 'childExplodebyAngle',\r\n};\r\n",
  "references": [
    "F:/Work/Game/07_RescueFlowerGirl_2.5.0/Project/RescueFlowerGirl_2.5.0/src/script/Lwg/Lwg.ts",
    "F:/Work/Game/07_RescueFlowerGirl_2.5.0/Project/RescueFlowerGirl_2.5.0/src/script/Game/EnemyAttack/_EnemyBullet.ts"
  ]
}
